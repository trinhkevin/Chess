	So far we have started to write the game itself as well as do the graphics simultaneously. We have our git repository set up so we can all push and pull our code from the same place. We have thought about the AI, but have decided that it will be best to implement that last so that we know our game works as a 1v1 game first as to not overwhelm ourselves. We are realizing that the game is actually harder to implement using classes than it would wihtout them, but we are managing. So far we have a class for each piece that contains the way it moves, its name, and the color it is (black or white). 
	We are handling the moves as an set of coordinates which is a data type that we made with typedef and it is a just an x and a y coordinate. The piece will always show all of the moves that it could make (other pieces and check aside) and put those moves into an array that will be passed to the board. The board will figure out where all the other pieces are in order to decide if a given move is legal. 
	We have not started heavily on writing the board class, but it will definitely be the most complicated. It is composed of pieces in a 2d vector. The board (as mentioned above) will figure out the valid moves that a piece can make and it will move the piece to the desired location. Since we are using vecotrs we may have to be creative to figure out how to actually move the piece to a different location and delete it from the original location.
	In terms of graphics we have a board with white and black squares, and that is about the extent of what we have. It will be easier to implement the graphics once we have a game working, but we can still design pieces and the board. 

	We formally as a group twice now, and have a decent idea of how to move forward. The first thing we need to do is make a text based game that actually works which we are getting close to, and then make the graphics, and then make the AI. Since we really know nothing about making recursive AI we may have to settle for making an AI that won't move its pieces into places where it can be captured.

	Each of us has actually programmed for about 5-6 hours and have done research on programming and graphics for about another 2-3 hours. 	  
